name: Continuous Integration

# cache:
# - externals/googletest -> appveyor.yml
# - externals/osg -> appveyor.yml
# - externals/osi -> appveyor.yml
# - externals/sumo -> appveyor.yml
# - resources/models -> appveyor.yml

# Maybe improve to cmake template file?
#echo "const char* ESMINI_BUILD_VERSION=`"$env:APPVEYOR_BUILD_VERSION`";"  | Out-File -Encoding ascii EnvironmentSimulator/Modules/CommonMini/buildnr.cpp

#if [[ $APPVEYOR_REPO_COMMIT_MESSAGE = *#store_bins* ]] || [ "$APPVEYOR_REPO_TAG" == "true" ]; - Store artifacts if this kind of commit

# if [ "$APPVEYOR_REPO_TAG" == "true" ]; - Prepare for distribution build

# Maybe parallelize unit tests, smoke tests, alks tests

#CMAKE_OSX_ARCHITECTURES="arm64;x86_64"

#lipo -create bin/libesminiRMLib.dylib -output bin/esminiRMLib.bundle
#lipo -create bin/libesminiLib.dylib -output bin/esminiLib.bundle

on:
  push:
    branches:
      - master
      - dev

  pull_request:
    branches:
      - master
      - dev

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure clang-format-14
        run: sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-14 200

      - name: Install Python3.8 and dependencies
        uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install -r support/python/requirements.txt

      - name: Run clang-format lint
        run: python3 main.py run format --clang_format_checker

      - name: Run cmake-format lint
        run: python3 main.py run format --cmake_format_checker

      - name: Run black-format lint
        run: python3 main.py run format --black_format_checker

      # TODO: OpenDrive generation currently has too many pylint issues
      #- name: Run pylint lint
      #  run: python3 main.py run pylint

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: ./.github/actions/setup_tools_shared

      - name: Cache
        uses: actions/cache@v3.2.5
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            resources/models
          key: ${{ runner.os }}-external-resources

      # TODO: We need a way to not fetch existing dependencies because of cached ones. This command currently asks for user input
      #- name: Fetch external dependencies/resources
      #  run: python3 main.py fetch dependency

      #- name: Generate OpenDrive interface
      #  run: python3 main.py generate opendrive

      - name: Install clang-tidy-15 - Ubuntu
        if: runner.os == 'Linux'
        env:
          LLVM_URL: http://apt.llvm.org/bionic/
          LLVM_PKG: llvm-toolchain-bionic-15
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q clang-tidy-15
          && sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-15 200

      - name: Build cppcheck 2.10 - Ubuntu
        if: runner.os == 'Linux'
        env:
          CPPCHECK_BUILD: /home/cppcheck/build
          CPPCHECK_SRC: /home/cppcheck/cppcheck-src
        run: sudo apt-get purge --auto-remove cppcheck
          && sudo apt-get install -y -q libxml2-utils libz3-dev libtinyxml2-dev libpcre3-dev
          && sudo mkdir -p ${{ env.CPPCHECK_BUILD }}
          && git clone --branch 2.10 https://github.com/danmar/cppcheck.git ${{ env.CPPCHECK_SRC }}
          && cmake -S ${{ env.CPPCHECK_SRC }} -B ${{ env.CPPCHECK_BUILD }} -G "Ninja" -DCMAKE_BUILD_TYPE:STRING=Release -DHAVE_RULES=On -DBUILD_GUI=Off
          && cmake --build ${{ env.CPPCHECK_BUILD }} -j
          && sudo cmake --install ${{ env.CPPCHECK_BUILD }}

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: ./scripts/run_tests.sh

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh ${{ matrix.configuration }}

      - name: Debugging with tmate
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3.14

  test-no-external-modules:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: ./.github/actions/setup_tools_shared

      - name: Cache
        uses: actions/cache@v3.2.5
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            resources/models
          key: ${{ runner.os }}-external-resources

      # TODO: We need a way to not fetch existing dependencies because of cached ones. This command currently asks for user input
      #- name: Fetch external dependencies/resources
      #  run: python3 main.py fetch dependency

      #- name: Generate OpenDrive interface
      #  run: python3 main.py generate opendrive

      - name: Install clang-tidy-15 - Ubuntu
        if: runner.os == 'Linux'
        env:
          LLVM_URL: http://apt.llvm.org/bionic/
          LLVM_PKG: llvm-toolchain-bionic-15
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q clang-tidy-15
          && sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-15 200

      - name: Build cppcheck 2.10 - Ubuntu
        if: runner.os == 'Linux'
        env:
          CPPCHECK_BUILD: /home/cppcheck/build
          CPPCHECK_SRC: /home/cppcheck/cppcheck-src
        run: sudo apt-get purge --auto-remove cppcheck
          && sudo apt-get install -y -q libxml2-utils libz3-dev libtinyxml2-dev libpcre3-dev
          && sudo mkdir -p ${{ env.CPPCHECK_BUILD }}
          && git clone --branch 2.10 https://github.com/danmar/cppcheck.git ${{ env.CPPCHECK_SRC }}
          && cmake -S ${{ env.CPPCHECK_SRC }} -B ${{ env.CPPCHECK_BUILD }} -G "Ninja" -DCMAKE_BUILD_TYPE:STRING=Release -DHAVE_RULES=On -DBUILD_GUI=Off
          && cmake --build ${{ env.CPPCHECK_BUILD }} -j
          && sudo cmake --install ${{ env.CPPCHECK_BUILD }}

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test-no-external-modules" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test-no-external-modules" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: ./scripts/run_tests.sh ${{ matrix.configuration }} true

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh ${{ matrix.configuration }} true
